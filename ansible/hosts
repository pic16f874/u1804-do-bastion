#[all:vars]
#ansible_python_interpreter = /usr/bin/python3
# на DO в образе Ubuntu1804 нет Python2.7
# похоже, поэтому и не работает Ansible
# TODO - поставить второй питон и проверить

[local_group]
localhost ansible_connection=local


[bast_group]
bast-host	ansible_port=22		ansible_host=u1804-bast		ansible_user=root 		ansible_ssh_private_key_file=~/.ssh/id_rsa

[launched]
104.248.132.97 ansible_host=104.248.132.97 ansible_user=root



#password authentication can also be used where needed by supplying the option --ask-pass. 
#If using sudo features and when sudo requires a password, 
#also supply --ask-become-pass (previously --ask-sudo-pass which has been 
# Depending on your setup, you may wish to use Ansible’s --private-key option to specify a pem file instead)

#some_host         ansible_port=2222     ansible_user=manager
#aws_host          ansible_ssh_private_key_file=/home/example/.ssh/aws.pem
#freebsd_host      ansible_python_interpreter=/usr/local/bin/python
#ruby_module_host  ansible_ruby_interpreter=/usr/bin/ruby.1.9.


#docker

#This connector deploys the playbook directly into Docker containers using the local Docker client. 
#The following parameters are processed by this connector:

#ansible_host     The name of the Docker container to connect to.
#ansible_user     The user name to operate within the container. The user must exist inside the container.
#ansible_become   If set to true the become_user will be used to operate within the container.
#ansible_docker_extra_args



# ansible_connection
#    Connection type to the host. This can be the name of any of ansible’s connection plugins. 
#    SSH protocol types are smart, ssh or paramiko. The default is smart. Non-SSH based types are described in the next section.

# General for all connections:

# ansible_host
#     The name of the host to connect to, if different from the alias you wish to give to it.
# ansible_port
#     The ssh port number, if not 22
# ansible_user
#     The default ssh user name to use.

# Specific to the SSH connection:

# ansible_ssh_pass
#     The ssh password to use (never store this variable in plain text; always use a vault. See Variables and Vaults)
# ansible_ssh_private_key_file
#     Private key file used by ssh. Useful if using multiple keys and you don’t want to use SSH agent.
# ansible_ssh_common_args
#     This setting is always appended to the default command line for sftp, scp, and ssh. Useful to configure a ProxyCommand for a certain host (or group).
# ansible_sftp_extra_args
#     This setting is always appended to the default sftp command line.
# ansible_scp_extra_args
#     This setting is always appended to the default scp command line.
# ansible_ssh_extra_args
#     This setting is always appended to the default ssh command line.
# ansible_ssh_pipelining
#     Determines whether or not to use SSH pipelining. This can override the pipelining setting in ansible.cfg.
# ansible_ssh_executable (added in version 2.2)
#     This setting overrides the default behavior to use the system ssh. This can override the ssh_executable setting in ansible.cfg.

# Privilege escalation (see Ansible Privilege Escalation for further details):

# ansible_become
#     Equivalent to ansible_sudo or ansible_su, allows to force privilege escalation
# ansible_become_method
#     Allows to set privilege escalation method
# ansible_become_user
#     Equivalent to ansible_sudo_user or ansible_su_user, allows to set the user you become through privilege escalation
# ansible_become_pass
#     Equivalent to ansible_sudo_pass or ansible_su_pass, allows you to set the privilege escalation password (never store this variable in plain text; always use a vault. See Variables and Vaults)
# ansible_become_exe
#     Equivalent to ansible_sudo_exe or ansible_su_exe, allows you to set the executable for the escalation method 