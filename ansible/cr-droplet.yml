- hosts: localhost
  gather_facts: false

  tasks:
    - name: add ssh key into digital-ocean 
      digital_ocean:
            state: present
            command: ssh
            name: netbook
            ssh_pub_key: "{{ sshpublickey }}"
            api_token: "{{ doapitoken }}"
      register: my_key

#    - debug:
#        msg: "{{ my_key }}"
#    - debug:
#        msg: "{{ my_key.ssh_key.id }}"

    - name: add digital-ocean droplet 
      digital_ocean:
            state: present
            command: droplet
            name: U1804-bastion
            api_token: "{{ doapitoken }}"
            region_id: fra1
            ssh_key_ids: "{{ my_key.ssh_key.id }}"
            size_id: s-1vcpu-1gb
#            image_id: Ubuntu-18-04-x64
            image_id: mysql-18-04
            wait_timeout: 500
      register: my_droplet

    - name: print digital-ocean droplet info 
      debug:
        msg: "ID is {{ my_droplet.droplet.id }} IP is {{ my_droplet.droplet.ip_address }}"

    - name: Add new droplet into ansible-playbook_in-memory inventory [host,group]
      add_host: 
         name: "{{ my_droplet.droplet.ip_address }}"
         groups: "launched"
         ansible_user: "root"
         ansible_ssh_common_args: "-oStrictHostKeyChecking=no"
         ansible_host_key_checking: False
         ansible_python_interpreter: python3

    - name: Wait for SSH to come up
      local_action: wait_for host={{ my_droplet.droplet.ip_address }} port=22 delay=60 timeout=320 state=started           

#from here https://gist.github.com/rdhyee/7047660

- hosts: "launched"
  gather_facts: true

  handlers:
    - name: "Restart sshd"
      service:
        name: "sshd"
        state: "restarted"

  tasks:
    - name: Ensure group kanoadmins exists
      group:
        name: "{{ admin_group_name }}"
        state: present

#    - name: "Allow admin users to sudo without a password"
#      lineinfile:
#        dest: "/etc/sudoers" # path: in version 2.3
#        state: "present"
#        regexp: "^%admin"
#        line: "%admin ALL=(ALL) NOPASSWD: ALL"

    - name: "Allow admin users to sudo without a password"
      lineinfile:
        dest: "/etc/sudoers.d/kanoadm"
        state: "present"
        create: yes
        insertbefore: BOF
        line: "%{{ admin_group_name }} ALL=(ALL) NOPASSWD: ALL"
        validate: '/usr/sbin/visudo -cf %s'

    - name: Create user which have admin privileges
      user:
        name: "{{ item.username }}"
        shell: "{{ item.shell }}"
        groups: "{{ item.groups }}"  
        append: yes
      with_items: "{{ admin_users }}"

    - name: "Add authorized keys"
      authorized_key:
        user: "{{ item.username }}"
        key: "{{ sshpublickey }}"
      with_items: "{{ admin_users }}"

#Now we are managing adding and removing users to the server we can improve security by disabling root logins via ssh. 
#Using lineinfile we will update /etc/ssh/config
#Handlers have two important traits: They at the end of the playbook only run if notified, 
#and they run only once no matter how many times they are notified.

    - name: "Disable root login via SSH"
      lineinfile:
         dest: "/etc/ssh/sshd_config"
         regexp: "^PermitRootLogin"
         line: "PermitRootLogin no"
      notify: "Restart sshd"

    - name: "create the file to be used for swap" 
      command: fallocate -l 4G /mnt/4GB.swap
#      command: sudo dd if=/dev/zero of=./4GB.swap bs=4096 count=1048576
    - name: format the file for swap
      command: mkswap /mnt/4GB.swap
    - name: change swap file permissions
      file: path=/mnt/4GB.swap owner=root group=root mode=0600
    - name: add the file to the system as a swap file
      command: swapon /mnt/4GB.swap
    - name: write swap entry in fstab
      mount: name=none src=/mnt/4GB.swap fstype=swap opts=sw passno=0 dump=0 state=present

# 2DO run Certbot

    - name: "download zabbix metapackage {{ zbx_repo_pckg }}"
      get_url: 
          url: "{{ zbx_repo_path }}{{ zbx_repo_pckg }}"
          dest: /tmp
          
    - name: "install zabbix metapackage {{ zbx_repo_pckg }}"
      become: true
      apt: 
        deb: "/tmp/{{ zbx_repo_pckg }}" 
          
    - name: "update apt cache"
      become: true
      apt:
        update_cache: yes
        cache_valid_time: 86400 #One day


    - name: "install zabbix packages {{ zbx_repo_pckg }}"
      become: true
      apt:
        pkg: "{{item}}"
        state: present
      with_items:
          - zabbix-server-mysql
          - zabbix-frontend-php 
          - zabbix-agent 

#    - name: "install zabbix packages"
#      become: true
#      apt:
#        pkg: "{{item}}"
#        state: present
#      with_items:
#          - zabbix-server-mysql
#          - zabbix-frontend-php 
#          - zabbix-agent 
#          - python-pip

#    - name: "pip install MySQL-python module"
#      pip: 
#        name: "{{item}}"
#      with_items:
#          - MySQLdb
#          - PyMySQL


##zabbix_db_name: zabbix
##zabbix_db_user: zabbix
##zabbix_db_pswd: zabbix




#    - name: "create mysql zabbix db"
#      become: true
#      mysql_db:
#        name: zabbix
#        state: present
#        encoding: utf8
#        collation: utf8_bin

#    - name: "create mysql zabbix user"
#      become: true
#      mysql_user:
#        name: zabbix
#        password: zabbix
#        priv: '*.*:ALL'
#        state: present


